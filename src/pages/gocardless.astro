---
import { changeLanguage } from "i18next";
import Container from "@components/container.astro";
import Layout from "@layouts/Layout.astro";
import NewsLetter from "@components/EmailForm.astro";
import Link from "@components/ui/link.astro";
import Pricing from "@components/gocardless-pricing.astro";
changeLanguage("en");

const productID1 = "pro_01hg6hk98k3v31xs1b09mzae84"
const productID2 = "pro_01hg6hcxvf56czc2kr4z7j1g0a"
const productID3 = "pro_01hg12gak6ha3dhyzzjat6rcdm"
interface PaddleProduct {
    "id": string,
    "product_id":string,
    "description": string,
    "name": string,
    "billing_cycle": {
      "interval": string,
      "frequency": number,
    },
    "trial_period": null | any,
    "tax_mode": string,
    "unit_price": {
      "amount": string,
      "currency_code": string,
    },
    "unit_price_overrides": any[],
    "custom_data": null | any,
    "status": string,
    "quantity": {
      "minimum": number,
      "maximum": number,
    },
    "import_meta": null | any
}

const headersList = {
 "Accept": "*/*",
 "Authorization": "Bearer df292b82363ffc09d5df591e6d0ed824ce3b2bf4d6626b8b6a"
}

const response = await fetch("https://sandbox-api.paddle.com/prices", {
  method: "GET",
  headers: headersList
});

const responseFromPaddle = await response.text();

const data = JSON.parse(responseFromPaddle).data.filter((item: PaddleProduct) => item.status === "active" && item.product_id === productID1 || productID2 || productID3) as PaddleProduct[];


const pricingData = [
  {
    name: "Simple",
    price: "€299",
    popular: false,
    features: ["Monthly fee/location", "Unlimited user", "Unlimited guest", "Unlimited kiosk", "Unlimited display", "Unlimited traffic*"],
    button: {
      text: "Let's talk!",
      link: "path_header.primary_button_text",
    },
    paddlePriceId: data[2].id,
    quantity: 1,
  },
  {
    name: "Standard",
    price: "€599",
    popular: true,
    features: ["Simple features plus:", "API access to integrate", "Push notification"],
    button: {
      text: "Let's talk!",
      link: "path_header.primary_button_text",
    },
    paddlePriceId: data[1].id,
    quantity: 1,
  },
  {
    name: "Premium",
    price: "Custom",
    popular: false,
    features: ["Standard features plus:", "Extra resources", "Customization", "Priority support", "Local installation & offline access"],
    button: {
      text: "Let's talk!",
      link: "path_header.primary_button_text",
    },
    paddlePriceId: data[0].id,
    quantity: 1,
  },
];
---

<Layout lang="en" title="ERPNext GoCardless Bank Integration">
	<Container>
		<div class="px-5 pt-10">
      <div class="flex justify-between items-center text-[#192734] dark:text-white h-auto md:flex-row flex-col pb-12 md:pb-1">
				<div class="flex flex-col h-full justify-center basis-3/5">
					<h1 class="text-4xl md:text-5xl leading-none font-semibold">ERPNext GoCardless Bank Integration</h1>
					<h2 class="text-xl text-[#192734] dark:text-white my-4">Automatic synchronization of bank transactions.</h2>
					<div>
						<Link href="/contact">
							Let's talk!
						</Link>
					</div>
				</div>
        <div class="mt-10 md:mt-0 basis-1/2 overflow-hidden">
					<img class="w-full" src="/images/Bucket-1-Illo-1.png" alt="ERPNext GoCardless Bank Integration" />
				</div>
			</div>
			<div class="flex flex-col items-center">
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Save time with automatic bank transaction synchronization!</h2>
					<p class="list-disc text-lg leading-7 space-y-5]">
						You can manually upload the bank statement to ERPNext if your bank provides it in a tabular form. <br><br>
						In this case, you can either set up the import on the ERPNext interface or format the table received from the bank for ERPNext. <br><br>
						Now you can import the bank statement and start the reconciliation, matching manually entered payment entries with the movements on the bank account.
					</p>
				</section>
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Less manual, boring tasks with automation</h2>
					<p class="list-disc text-lg leading-7 space-y-5]">
						Thanks to the European open banking directive, banks are required to provide access to banking data according to industry standards, with the appropriate permissions. <br><br>
						Various services have been built for the "exchange" of such banking data, allowing easy access to bank data with the right permissions. <br><br>
						Several providers exist in the market, such as Plaid, which is already integrated into ERPNext, but data from Hungarian banks is not accessible through this service. (However, Wise and Revolut can be accessed through some tricks and for an uncertain duration.) <br><br>
						For those who want a more reliable solution and don't want to spend hours on reconciliation, they can use the GoCardless (Bank Account Data) synchronization solution developed by Monolith. <br><br>
						Following our usual standards in development, we used the ERPNext Bank transaction doctype for the development, making our app compatible with both the built-in matching solution and other enhanced bank reconciliation apps. The latter is interesting because it can almost completely automate the process and make it much faster.
					</p>
				</section>
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Without limitations</h2>
					<p class="list-disc text-lg leading-7 space-y-5]">
						Calculate how much it costs in work hours to import and reconcile bank transactions for several hours. With our solution, you can request an unlimited number of transactions from almost any bank's own account. <br><br>
						(Although access must be renewed every 90 days, and a bank account belonging to the same bank counts as one request, with the company! With up to 50 authentications per month, you can request transactions from up to 50 banks and an unlimited number of accounts associated with that bank.) <br><br>
					</p>
				</section>

				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Only €49/month/server - unlimited companies</h2>
					<p class="list-disc text-lg leading-7 space-y-5]">
						Our solution is currently available for self-service with ERPNext version 14, which supports multi-company setup but does not yet have company-specific access. However, in the upcoming version 15, we will further enhance this. <br><br>
						After the order below, we will automatically launch an ERPNext instance on the Frapp Cloud system, which can run custom code, and by providing administrator access, the system can be used immediately, and bank synchronization can be set up. <br><br>
						With this solution, we ensure that the ERPNext GoCardless app is available on the ERPNext machine and can be used for bank synchronization as long as the subscription is active. However, we do not provide access to the source code, and transactions do not go through our servers. <br><br>
						With this method, we do not restrict the submission of your own code, but we do not provide access to the Frappe Cloud account.
					</p>
				</section>				
			</div>
		<section>
			<div class="grid md:grid-cols-3 gap-10 mx-auto max-w-4xl mt-20" id="pricing" >
				{pricingData.map((item, index) => (
					<Pricing
						key={index}
						plan={item}
					/>
				))}
			</div>
		</section>
		<section id="contact-form-2">
			<NewsLetter />
		</section>

		</div>
	</Container>
</Layout>
