---
import Container from "@components/container.astro";
import NewsLetter from "@components/EmailForm.astro";
import Link from "@components/ui/link.astro";
import Layout from "@layouts/Layout.astro";
import { changeLanguage } from "i18next";
changeLanguage("en");
---

<Layout lang="hu" title="Static Site Generator">
  <Container>
    <div class="px-5 pt-10">
      <div
        class="flex justify-between items-center text-[#192734] dark:text-white h-auto md:flex-row flex-col pb-12 md:pb-1"
      >
        <div class="flex flex-col h-full justify-center basis-3/5">
          <h1
            class="text-4xl md:text-5xl leading-none font-semibold hyphens-auto"
          >
            Lightning fast website
          </h1>
          <h2 class="text-xl text-[#192734] dark:text-white my-4">
            Static site generators with JamStack.
          </h2>
          <div>
            <Link href="/contact/">Lets Talk!</Link>
          </div>
        </div>
        <div class="mt-10 md:mt-0 basis-1/2 overflow-hidden">
          <img class="w-full" src="/images/jamstack-astro-hugo.jpg" alt="" />
        </div>
      </div>
      <div class="flex flex-col items-center">
        <section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
          <h2 class="font-bold text-3xl mb-10">
            Jamstack - the key to fast websites by simplifying the system -
            decoupling
          </h2>
          <p class="list-disc text-lg leading-7 space-y-5]">
            Jamstack is a completely new approach that can be summarized by
            simplifying it, returning to the roots when a website does not want
            to be more than just a website. That is, it can be more, but unlike
            the previous complex systems, we don't have to solve everything in
            the web application. We can say that the website is liberated
            because now it can be almost anything, and we don't have to worry
            about the limitations of the complex system. In the past, when we
            think of, for example, a PHP-based page like WordPress, to build a
            website, we were limited by the boundaries of WordPress. Now, as the
            official definition says, Jamstack eliminates the approach that
            business logic (simplified website functions) determines the
            appearance and operation of the website together. <br /><br />
             Returning to the basics means that, alongside the most modern
            technologies, we can build a fast website using simple HTML.
            However, there may be a need for the business logic and functions
            mentioned earlier, and we don't have to give them up, but we can
            entrust them to a backend system that handles them much better than,
            for example, the <a
              href="/erpnext/"
              style="text-decoration: underline;">ERPNext</a
            > or <a href="/odoo-erp/" style="text-decoration: underline;"
              >Odoo</a
            > enterprise resource planning system, but also mention the <a
              href="/mautic-marketing-automation-platform/"
              style="text-decoration: underline;"
              >Mautic Marketing and Newsletter Software</a
            >, which can be connected through APIs. <br /><br />
             However, not in every case is such a backend system necessary, and
            in most cases, Jamstack consists of a single, highly customizable
            and much faster static website component, that is, actual websites.
          </p>
        </section>
        <section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
          <h2 class="font-bold text-3xl mb-10">Using Static Sites</h2>
          <p class="list-disc text-lg leading-7 space-y-5]">
            Previously used systems, such as the popular WordPress or Drupal CMS
            systems, resorted to a similar solution when they could no longer
            speed up their websites using other methods or had to serve such a
            high traffic that couldn't be managed otherwise. <br /><br />
             This means that we no longer dynamically generate individual web
            pages when someone wants to view them, but we prepare them in
            advance and show them from a cache. <br /><br />
             The Static Site Generator solution does exactly this, but, as
            mentioned earlier, independently of a slow, outdated layer. (It is
            worth noting that Jamstack solutions are also available for
            WordPress, but then it can be questioned why we need WordPress at
            all!?)<br /><br />
             The solutions listed below, which can be used to build complex web
            applications thanks to the Jamstack "architecture," or used as fast
            standalone web pages, generate static pages in advance and not
            individually every time someone requests them. These pages are very
            fast for users and for Google, including the mobile version (as
            monolithon.com is based on this technology). <br /><br />
             The website owner does not always consider whether developers like
            to work with the given technology, but it is worth noting that this
            is what it's all about, which ultimately allows for more economical
            development, as more experts can be found for such projects than for
            solutions that developers do not like. <br /><br />
             Not only is development more economical, but also hosting, as
            static pages can be hosted on multiple platforms that are much
            cheaper or even free compared to traditional hosting. For a
            low-traffic site, it's handy not to spend a fortune on it every
            month, and for a high-traffic site, it's great because it doesn't
            require more power for scaling, so hosting high-traffic sites is
            also cheap or free. <br /><br />
             The added benefit, in addition to the above, which is closely
            related to economy and scalability, is that it can be used with a
            free CDN system, meaning that the page will always load from the
            server closest to the visitor, which allows for faster display,
            while we don't have to maintain servers all over the world and pay
            for them.
          </p>
        </section>
        <section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
          <h2 class="font-bold text-3xl mb-10">Astro.build</h2>
          <p class="list-disc text-lg leading-7 space-y-5]">
            Fortunately, today we can choose from a multitude of Static Site
            Generator solutions. One of the first and most widespread was HUGO,
            which is still very popular and a good solution, which is why we
            support it, but it did not address the problem of slow websites.
            This is related to the implementation of interactive elements, for
            the sake of simplicity. <br /><br />
             And here comes Astro.build into play. Because most other SSGs also
            use JavaScript alongside HTML (from which the text content is
            built), and worst of all, a lot of JavaScript simultaneously. Even
            one such solution requires significant resources from the visitor's
            device, but if they run unchecked, they greatly slow down the page. <br
            /><br />
             Astro.build offers a solution to this, generating only possible
            HTML static code, without filling the page with wasteful code. This
            allows an Astro.build-based website to be lightning fast even on
            mobile, just like our monolithon.com page.
          </p>
        </section>
        <section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
          <h2 class="font-bold text-3xl mb-10">HUGO</h2>
          <p class="list-disc text-lg leading-7 space-y-5]">
            HUGO was one of the pioneers, but it continues to evolve and is used
            by many because almost everything mentioned above can be said about
            it, which makes its use very advantageous. It can be integrated into
            the Static Site Generator, Jamstack system, and allows for the
            construction and management of multilingual websites. However, it
            doesn't handle JavaScript as cleverly as Astro.Build.
          </p>
        </section>
        <section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
          <h2 class="font-bold text-3xl mb-10">Nuxt.js</h2>
          <p class="list-disc text-lg leading-7 space-y-5]">
            We mention Nuxt.js only because, even though it has the above super
            features, for those who not only want a website, whether it's a
            static site or a Jamstack-based one but also want to sell and use a
            lightning-fast system for this, we recommend the Headless <a
              href="/vuestorefront-headless-ecommerce/"
              style="text-decoration: underline;">VueStoreFront</a
            > system, which is a fast e-commerce solution, among others, thanks
            to Nuxt.js.
          </p>
        </section>
        <section id="contact-form-2">
          <NewsLetter />
        </section>
      </div>
    </div>
  </Container>
</Layout>
