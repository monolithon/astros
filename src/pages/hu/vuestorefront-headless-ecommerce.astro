---
import { changeLanguage } from "i18next";
import Container from "@components/container.astro";
import Layout from "@layouts/Layout.astro";
import NewsLetter from "@components/EmailFormhu.astro";
import Link from "@components/ui/link.astro";
changeLanguage("hu");
---

<Layout lang="hu" title="VueStoreFront Headless eCommerce webáruház a sebességért és a függetlenségért">
	<Container>
		<div class="px-5 pt-10">
      <div class="flex justify-between items-center text-[#192734] dark:text-white h-auto md:flex-row flex-col pb-12 md:pb-1">
				<div class="flex flex-col h-full justify-center basis-3/5">
					<h1 class="text-4xl md:text-5xl leading-none font-semibold hyphens-auto">VueStore&shy;Front Headless webáruház</h1>
					<h2 class="text-xl text-[#192734] dark:text-white my-4">A sebességért és a függetlenségért.</h2>
					<div>
						<Link href="/hu/kapcsolat">
							Beszéljünk!
						</Link>
					</div>
				</div>
        <div class="mt-10 md:mt-0 basis-[38%] overflow-hidden">
					<img class="w-full" src="/images/vuestorefront-headless-ecommerce.jpg" alt="" />
				</div>
			</div>
			<div class="flex flex-col items-center">
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">A négy kilenc(ven)-es</h2>
					<p class="list-disc text-[17px] leading-7 space-y-5]">
							Az "arany szakmában" a legjobb arany a négy kilences, azaz a 99,99 tisztaságú arany. <br><br>Hasonló sztenderd a weboldalaknál a Google Pagespeed Insight (sebességmérő eszköze, ami a lighthouse szoftverre épül) által mutatott 4 db 90%-os érték. Ez gyakorlatilag aranyat ér, hiszen ma nagyon kevés weboldal teljesíti ezt az értéket, főleg mobil változat esetén, viszont ezekt a Google a találati elejére sorolja és a felhasználók is szívesebben használják ezeket a villámgyors oldalakat, így több a forgalom és a konverzió is ezeken az oldalakon. Ami végül több bevételt jelent. 
							<p/>
				</section>

				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Hogyan lehet mobilon is villámnygyors a webáruház?</h2>
					<p class="list-disc text-[17px] leading-7 space-y-5]">
						A kulcs a legújabb technológia, de nem úgy, ahogy a legtöbb esetben mindig valami újat akarnak eladni az üzletkötők, amit aztán újra és újra le kell cserélni. Itt másról van szó. Mondhatnánk, hogy paradigmaváltás történt, igaz a sokadik, és persze a fejlődés sosem áll meg, de most, ahogy amúgy ERP szoftverek esetében is, úgy a weboldal és webáruház, ecommerce esetében is kikristályosodott a jógyakorlat a sok zsákutcának, pl mobilappfejlesztéseknek köszönhetően. <br><br>
						A fejlesztők és a technológia cégek végre felismerték, hogy annak ellenére, hogy a számítási kapacitás folyamatosan növekszik, azaz az eszközeink egyre gyorsabbak, lehetséges gyors és egyszerű szoftvereke írni, mert nincs szükség a csillagromboló szerű komplexitásra. Így született a VueStoreFront, ami integrálja magában, Vue.js Nuxt.js és Tailwind css előnyeit, de közben az összes szükséges elemet (amik a webáruház felületéhez szükséges, pl, termékadatlap, kosárba gomb, stb) azonnal használható, de akár gyorsan módosítható formában szállítja, valamint biztosítja a rendszer és alkotóelemeink egyszerű frissítését. <br><br>
						Azon kívül, hogy szinte minden szükséges dolgot készen kapunk nem csak az elkészült oldal nagyon gyors a technológiának köszönhetően, hanem új oldal építése, vagy egyedi kérések teljesítése is nagyon egyszerű ebben a designsystem-ben, hiszen nem kell semmilyen egyedi szoftvert megtanulni, mint például egy Odoo ecommerce webáruház, vagy ERPNext, vagy akár a Shopify rendszer esetében, így ráaduásul több fejlesztői kapacitás is elérhető. <br><br>
						"Ez akkor biztos olyasmi, mint az AMP volt, hogy gyors, de közben nem teljes funkcionalitású..." Szerencsére nem. Olyannyira nem, hogy ez a megoldás lehetővé teszi, hogy a nativ mobilakalmazások helyett is, akár offline is működő, teljes funkconalitású weboldalt és weboldal alapú, de "letöltheő" villámgyorsa appot is készítsünk, tehát mostantól nincs különbség, azaz nem kell több felületet tervezni, sem karbantartani. <br><br>
						De ez csak a több felület kezelésének kellemetlenségét eliminálja, mert közben azt is lehetővé teszi, hogy nagyon egyszerűen más-más (pl kinézetű) felületet hozzunk létre vele, de mivel az alapja ugyanaz, nagyon gyorsan lehet például márka oldalakat, vagy B2B és B2C szeparát oldalakat készíteni vele. 
					</p>
				</section>
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">Oké, gyors webáruház, de mi az a headless?</h2>
					<p class="list-disc text-[17px] leading-7 space-y-5]">
						A fentebb ismertetett VueStoreFront, ahogy a neve is mutatja az a gyors felület, amivel a látogató találkozik. Az, hogy milyen adatokkal, például termékekkel, árakkal, töltjük meg ezeket a felületeket az a háttérendszeren múlik. És itt jön a VueStureFront és a headless igazi előnye, mert ez VueStoreFront többféle háttérrendszerhez is integrálható. <br><br>
						A megannyi létező megoldás is integrálható rengeteg másik megoldáshoz, a nagy különbség az, hogy itt nem szinkronizációról van szó, mert annak rengeteg hátulütője van. Itt nem szinkronizációról van szó, hanem egyetlen "igazság" létezik, és az a háttérrendszerben van, de az ott található adatokat lehet nagyon szabadon "megjeleníteni" a VueStoreFront segítségével. És a Headless ezt jeletni, hogy kell mellé egy Head, azaz fej, ami tartalmazza az adatokat. Azzal, hogy nincs saját "adatbázisa" és nem kell szinkronizálni a módosítások is villámgyorsan, az operáció (értékesítés) megállítása nélkül is megtörténhet. <br><br>
						És ezzel elérkeztünk egy újabb előnyhöz, hogy a háttérendszert sokkal könnyebb biztonságosan tartani, és akár annak frissítési ütemezése is költséghatékonyabb lehet, hiszen arról leválasztottunk a headless VueStoreFront technológiával minden ügyfélforgalmat. <br><br>
						Nem csak a frissítési nehézséget elimináltuk, hanem ennek köszönhetően kiválaszthatjuk számunkra a legjobb háttérrendszert, aminek már nem kell webáruházként is működnie, ami belátható, hogy ha mindkét funkciót tudja, akkor valamelyiket nem elég jó szinvonalon. Tehát ha a háttérrendszerint egy célszoftver, ahogy a VueStoreFront is, akkor ezzel megkapjuk a legtöbb funkcionalitást a stabilitás, biztonság és gyorsaság mellett költséghatékonyan a profitmaximalizáció lehetőségével az egyszerű skálázhatósággal, amit a hagyományos módon szintén csak nagyon drágán, vagy a tehcnikai limitáció miatt egyáltalán nem lehetne megtenni. 
					</p>
				</section>
				<section class="py-8 px-4 md:w-2/3 text-[#192734] dark:text-white">
					<h2 class="font-bold text-3xl mb-10">A háttérendszer</h2>
					<p class="list-disc text-[17px] leading-7 space-y-5]">
							Jelenleg az Odoo-t ajánljuk VueSoreFront háttérrendszernek, de várhatóan az ERPNext-hez is lesz megoldásunk. Ebből belátható, hogy azok számára, akik az Odoo ecommerce megoldását kinőtték, vagy bele sem kezdtek annak limitált működése miatt, esetleg más meglévő ecommerce rendszerekkel szinkronizálnak, ez a legegyszerűbb és leggyorsabb módja a folyamatok egyszerűsítésére és a limit nélküli bővülésnek. Persze fordítva is meg lehet közelíteni, ha valaki a jelenlegi megoldásának csak a felületén kívánaja lecserélni, hiszen például a Shopify is kínál saját Headless megoldást, vagy a Shopify-hoz is kapcsolató a VuestoreFront, akkor is elérhető a gyorsulás, talán a legegyszerűbben, mert az ügyviteli folyamatok nem változnak, majd második lépésben lehetséges a korábbi háttérrenszert nyílt forrású megoldásra cserélni, hiszen egy webáruház mellé nem érdemes másik webáruházat fenntartani, főleg, hogy abból az egyéb ERP rendszerek által nyújtott magas szintű funkcionalitások, például raktározás, könyvelés, projektmenedzsment, ügyfélszolgálat stb., amire előbb-utóbb szükség lesz úgyis hiányzik. <br><br>
							És igen, a VueStoreFront headless megoldás egy ingyenes és nyílt forrású szoftvercsomag. 
					</p>
				</section>
				<section id="contact-form-2">
					<NewsLetter />
				  </section>
			</div>
		</div>
	</Container>
</Layout>
