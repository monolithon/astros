---
import Link from "@components/ui/link.astro";
import { localizePath } from "astro-i18next";
import { t } from "i18next";
import Languageselector from "@components/languageselector.astro";
import Themeselector from "@components/themeselector.astro";
import Button from "@components/ui/button.astro";

const logo = "logo.title";

export const menuitems = [
	{
		title: "ERP",
		children: [
			{ title: "ERPNext", path: "path_header.erpnext" },
			{ title: "header.implementation", path: "path_header.implementation" },
			{ title: "header.invoicing", path: "path_header.invoicing" },
			{ title: "header.accounting", path: "path_header.accounting" },
			{ title: "header.accounting", path: "path_header.accounting" },
			{ title: "header.odoo", path: "path_header.odoo" },
		],
	},
	{
		title: "CMS & eCommerce",
		children: [
			{ title: "VueStoreFront Headless eCommerce", path: "#" },
			{ title: "Shopify", path: "#" },
			{ title: "Static website", path: "#" },
		],
	},
	{
		title: "Queue Management System",
		path: "#",
	},
	{
		title: "Integration",
		children:[
			{ title: "n8n - like Zapier or Make (Integromat)", path: "#" },
			{ title: "Mautic", path: "#" },
	]
	},
];
---

<div
	x-data="{open: window.innerWidth < 768 ? false : true}"
	class="flex flex-col max-w-screen-xl py-2 px-4 mx-auto md:items-center md:justify-between md:flex-row md:px-2 lg:px-0 z-10 md:pt-2 relative dark:bg-stone-900">
	<div class="p-4 flex flex-row items-center justify-between">
		<a
			href={localizePath("/")}
			class="flex gap-3 items-center text-[18px] text-gray-900 rounded-lg dark:text-white focus:outline-none focus:shadow-outline">
			{t(logo)}
		</a>
		<button id="menuToggle" class="md:hidden text-gray-500 w-10 h-10 relative focus:outline-none">
			<span class="sr-only">Open main menu</span>
			<div class="block w-5 absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
				<span
					aria-hidden="true"
					class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
					:class="{'rotate-45': open,' -translate-y-1.5': !open }">
				</span>
				<span
					aria-hidden="true"
					class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
					:class="{'opacity-0': open } ">
				</span>
				<span
					aria-hidden="true"
					class="block absolute h-0.5 w-5 bg-current transform transition duration-200 ease-in-out"
					:class="{'-rotate-45': open, ' translate-y-1.5': !open}">
				</span>
			</div>
		</button>
	</div>
	<nav class="flex" id="nav">
		<div class="flex flex-col flex-grow text-center gap-2 md:justify-center md:items-center md:flex md:flex-row md:mx-auto">
			{
				menuitems.map((item) =>
					item.children && item.children.length ? (
						<div @click.away="open = false" class="relative" x-data="{ open: false }">
							<Button @click="open = !open" style="link" size="sm" class="mt-[2px]">
								{t(item.title)}
								<svg
									fill="currentColor"
									viewBox="0 0 20 20"
									:class="{'rotate-180': open, 'rotate-0': !open}"
									class="inline w-4 h-4 mb-[2px] transition-transform duration-200 transform  origin-center">
									<path
										fill-rule="evenodd"
										d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
										clip-rule="evenodd">
									</path>
								</svg>
							</Button>
							<div
								x-show="open"
								x-transition:enter="transition ease-out duration-100"
								x-transition:enter-start="transform opacity-0 scale-95"
								x-transition:enter-end="transform opacity-100 scale-100"
								x-transition:leave="transition ease-in duration-75"
								x-transition:leave-start="transform opacity-100 scale-100"
								x-transition:leave-end="transform opacity-0 scale-95"
								class="absolute mt-2 bg-white right-0 w-full origin-top-right rounded-md md:w-48 outline-2 border border-gray-300 z-10">
								<div class="px-2 py-2 rounded-md shadow dark:bg-gray-800">
									{ item.children.map((subitem) =>
										<Link
											href={localizePath(t(subitem.path))}
											style="hover"
											size="sm"
											class="block dark:text-white"
											x-data="{ isActive: false }"
											x-init={`() => {
												const path = $el.getAttribute('data-path');
												const checkPath = () => {
													isActive = window.location.pathname === path ||
																window.location.pathname === path + '/' ||
																window.location.pathname === '/it' + path ||
																window.location.pathname === '/it' + path + '/';
												};
												checkPath();
												window.addEventListener('popstate', checkPath);
											}`}
											:class="{ 'bg-gray-200 dark:bg-gray-600 ': isActive }"
										>
											{t(subitem.title)}
										</Link>
									)}
								</div>
							</div>
						</div>
					) : (
						<Link
							href={localizePath(t(item.path))}
							style="hover"
							size="sm"
							class="dark:text-white"
							x-data="{ isActive: false }"
							x-init={`() => {
								const path = $el.getAttribute('data-path');
								const checkPath = () => {
									isActive = window.location.pathname === path ||
												window.location.pathname === path + '/' ||
												window.location.pathname === '/it' + path ||
												window.location.pathname === '/it' + path + '/';
								};
								checkPath();
								window.addEventListener('popstate', checkPath);
							}`}
							:class="{ 'bg-gray-200 dark:bg-gray-600': isActive }"
							data-path={item.path}
						>
							{t(item.title)}
						</Link>
					)
				)
			}
		</div>
		<div class="mt-4 md:mt-0 flex flex-col md:flex-row gap-8">
			<Themeselector />

			<Languageselector
				showFlag={false}
				languageMapping={{ en: "English", hu: "Magyar " }}
				class="appearance-none py-1 px-2 rounded bg-slate-100 dark:bg-stone-900"
			/>

			<Link href={localizePath(t("path_header.primary_button_text"))} class="md:px-3 md:py-2 leading-6">
				{t("header.primary_button_text")}
			</Link>
		</div>
	</nav>
	<style>
		/* CSS */
		/* The 'show' class will be used to toggle visibility of the navigation */
		#nav {
			display: none; /* Start with the navigation hidden */
		}

		#nav.show {
			display: flex; /* Show the navigation when the 'show' class is applied */
		}
	</style>
</div>

<script>
	// JavaScript
	const toggle = document.querySelector("#menuToggle");
	const nav = document.querySelector("#nav");

	toggle?.addEventListener("click", () => {
		nav.classList.toggle("show");
	});

	// Add event listener to check window width on page load and window resize
	window.addEventListener("load", checkWindowSize);
	window.addEventListener("resize", checkWindowSize);

	function checkWindowSize() {
		if (window.innerWidth > 790) {
			nav.classList.add("show");
		} else {
			nav.classList.remove("show");
		}
	}
</script>
